generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String    @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  stripeConnectId String?
  accounts        Account[]

  @@index([userId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Event {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  location       String
  eventDate      Float
  price          Float
  totalTickets   Int
  userId         String
  imageStorageId String?
  is_cancelled   Boolean?      @default(false)
  tickets        Ticket[]
  waitingList    WaitingList[]

  @@index([userId])
}

enum TicketStatus {
  valid
  used
  refunded
  cancelled
}

model Ticket {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  eventId         String       @db.ObjectId
  userId          String
  purchasedAt     Float
  status          TicketStatus
  paymentIntentId String?
  amount          Float?
  event           Event        @relation(fields: [eventId], references: [id])

  @@index([eventId])
  @@index([userId])
  @@index([userId, eventId])
  @@index([paymentIntentId])
}

enum WaitingListStatus {
  waiting
  offered
  purchased
  expired
}

model WaitingList {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  eventId        String?           @db.ObjectId
  userId         String
  status         WaitingListStatus
  offerExpiresAt Float?
  event          Event?            @relation(fields: [eventId], references: [id])

  @@index([eventId, status])
  @@index([userId, eventId])
  @@index([userId])
}
